package com.mobile.telatenkarya.Activity;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.androidnetworking.AndroidNetworking;
import com.androidnetworking.common.Priority;
import com.androidnetworking.error.ANError;
import com.androidnetworking.interfaces.JSONArrayRequestListener;
import com.androidnetworking.interfaces.JSONObjectRequestListener;
import com.mobile.telatenkarya.Adapter.CheckoutAdapter;
import com.mobile.telatenkarya.Adapter.PembayaranAdapter;
import com.mobile.telatenkarya.Adapter.PopUpKategoriAdapter;
import com.mobile.telatenkarya.Model.Keranjang;
import com.mobile.telatenkarya.Model.Pembayaran;
import com.mobile.telatenkarya.PrefManager;
import com.mobile.telatenkarya.R;
import com.mobile.telatenkarya.Server.Server;
import com.mobile.telatenkarya.databinding.ActivityCheckoutBinding;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class CheckoutActivity extends AppCompatActivity {
    private ActivityCheckoutBinding binding;
    PrefManager prefManager;
    List<Keranjang> keranjangList;
    List<Pembayaran> pembayaranList = new ArrayList<>();
    int total = 0, subtotal = 0, harga, banyak, x = 0, z = 0, status;
    int ongkir, idBank;
    PembayaranAdapter adapter;
    String pembayaran;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivityCheckoutBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        AndroidNetworking.initialize(this);

        binding.imageBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onBackPressed();
            }
        });

        prefManager = new PrefManager(this);

        binding.Layoutalamat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(CheckoutActivity.this, AlamatActivity.class);
                startActivity(i);
            }
        });

        binding.imageAddAlamat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent i = new Intent(CheckoutActivity.this, AlamatActivity.class);
                startActivity(i);
            }
        });

        keranjangList = new ArrayList<>();
        binding.recyclerCheckout.setHasFixedSize(true);
        binding.recyclerCheckout.setLayoutManager(new LinearLayoutManager(this));

        binding.recyclerBank.setHasFixedSize(true);
        binding.recyclerBank.setLayoutManager(new LinearLayoutManager(this));

        Intent in = getIntent();
        x = in.getIntExtra("status", 0);
        Log.d("tag", "status di Alamat : " + x);

        Intent i = new Intent(getIntent());
        ongkir = i.getIntExtra("ongkos", 0);
        Log.d("tag", "ongkos di Alamat : " + ongkir);

        getKeranjang();
        setBayar();
        getAlamat();

        binding.rgMetode.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                switch (checkedId) {
                    case R.id.rbCOD:
                        binding.recyclerBank.setVisibility(View.GONE);
                        pembayaran = "COD";
                        status = 1;
                        break;
                    case R.id.rbTransfer:
                        binding.recyclerBank.setVisibility(View.VISIBLE);
                        getPembayaran();
                        status = 2;
                        break;
                }
            }
        });

        binding.btnPesan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                cek_bayar_alamat();
            }
        });

    }

    private void getPembayaran() {
        AndroidNetworking.post(Server.site + "set_pembayaran.php")
                .addBodyParameter("kode", String.valueOf(1))
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsJSONArray(new JSONArrayRequestListener() {
                    @Override
                    public void onResponse(JSONArray response) {
                        if (response.length() >= 1) {
                            try {
                                pembayaranList.clear();
                                for (int i = 0; i < response.length(); i++) {
                                    JSONObject p = response.getJSONObject(i);
                                    pembayaranList.add(new Pembayaran(
                                            p.getInt("id_bank"),
                                            p.getString("nama_bank"),
                                            p.getString("no_rek"),
                                            p.getString("atas_nama")
                                    ));
                                }
                                adapter = new PembayaranAdapter(CheckoutActivity.this, pembayaranList);
                                binding.recyclerBank.setAdapter(adapter);

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        } else {
                            Toast.makeText(CheckoutActivity.this, "Pembayarn Tidak Ada", Toast.LENGTH_SHORT).show();
                        }
                    }

                    @Override
                    public void onError(ANError anError) {
                        Log.d("tag", "error pembayaran :" + anError);
                    }
                });
    }

    public void onBackPressed() {
        super.onBackPressed();
        Intent i = new Intent(CheckoutActivity.this, KeranjangActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)
                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivity(i);
    }

    private void getAlamat() {
        binding.progress.setVisibility(View.VISIBLE);
        AndroidNetworking.post(Server.site + "get_alamat.php")
                .addBodyParameter("id_customer", prefManager.getIdUser())
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsJSONObject(new JSONObjectRequestListener() {
                    @Override
                    public void onResponse(JSONObject response) {
                        try {
                            binding.progress.setVisibility(View.GONE);
                            if (response.getString("kode").equalsIgnoreCase("1")) {
                                JSONObject data = response.getJSONObject("data");

                                if (data.getString("namapengirim").equalsIgnoreCase("") || data.getString("nohp").equalsIgnoreCase("")
                                        || data.getString("alamat").equalsIgnoreCase("") || data.getString("kodepos").equalsIgnoreCase("")) {
                                    binding.NamaPengirim.setVisibility(View.GONE);
                                    binding.NoHPPengirim.setVisibility(View.GONE);
                                    binding.LayoutAlamatKode.setVisibility(View.GONE);
                                    binding.HarapMasukkan.setVisibility(View.VISIBLE);
                                    z = 1;
                                } else {
                                    binding.NamaPengirim.setVisibility(View.VISIBLE);
                                    binding.NoHPPengirim.setVisibility(View.VISIBLE);
                                    binding.LayoutAlamatKode.setVisibility(View.VISIBLE);
                                    binding.HarapMasukkan.setVisibility(View.GONE);

                                    binding.NamaPengirim.setText(data.getString("namapengirim"));
                                    binding.NoHPPengirim.setText(" | " + data.getString("nohp"));
                                    binding.AlamatPengirim.setText(data.getString("alamat"));
                                    binding.KodePos.setText(data.getString("kodepos"));
                                }

                            } else {
                                binding.NamaPengirim.setVisibility(View.GONE);
                                binding.NoHPPengirim.setVisibility(View.GONE);
                                binding.LayoutAlamatKode.setVisibility(View.GONE);
                                binding.HarapMasukkan.setVisibility(View.VISIBLE);
                                z = 1;
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                    @Override
                    public void onError(ANError anError) {
                        Log.d("error", "code : " + anError);
                        Toast.makeText(CheckoutActivity.this, "Gagal Mendapatkan Data", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void getKeranjang() {
        AndroidNetworking.post(Server.site + "set_keranjang.php")
                .addBodyParameter("id_customer", prefManager.getIdUser())
                .addBodyParameter("kode", String.valueOf(1))
                .setPriority(Priority.MEDIUM)
                .build()
                .getAsJSONArray(new JSONArrayRequestListener() {
                    @Override
                    public void onResponse(JSONArray response) {
                        if (response.length() >= 1) {
                            try {
                                for (int i = 0; i < response.length(); i++) {
              